<?php
/**
 *  Autoloader function generated by crodas/Autoloader
 *
 *  https://github.com/crodas/Autoloader
 *
 *  This is a generated file, do not modify it.
 */
$GLOBALS['call_namespacesstat'] = 0;
$GLOBALS['load_namespacesstat'] = 0;

spl_autoload_register(function ($class) {
    /*
        This array has a map of (class => file)
    */

    // classes {{{
    static $classes = array (
  'autoloader\\test\\yyy\\foobar' => '/home/crodas/projects/newest/Autoloader/tests/fixtures/namespaces/Foo.php',
  'yet_another_silly_class' => '/home/crodas/projects/newest/Autoloader/tests/fixtures/namespaces/Foo.php',
);
    // }}}


    $class = strtolower($class);
    if (isset($classes[$class])) {
        $GLOBALS['call_namespacesstat']++;

        if (is_array($class)) {

            if (!$class[1]($class[0], false)) {

                $GLOBALS['load_namespacesstat']++;

                require $classes[$class[0]];

            }

        } else if (!class_exists($class, false)) {

            $GLOBALS['load_namespacesstat']++;

            require $classes[$class];

        }
        return true;
    }

    /**
     * Autoloader that implements the PSR-0 spec for interoperability between
     * PHP software.
     *
     * kudos to @alganet for this autoloader script.
     * borrowed from https://github.com/Respect/Validation/blob/develop/tests/bootstrap.php
     */
    $fileParts = explode('\\', ltrim($class, '\\'));
    if (false !== strpos(end($fileParts), '_')) {
        array_splice($fileParts, -1, 1, explode('_', current($fileParts)));
    }
    $file = stream_resolve_include_path(implode(DIRECTORY_SEPARATOR, $fileParts) . '.php');
    if ($file) {
        return require $file;
    }
    return false;
}, true, true);


function getnamespacesstat() {
    global $load_namespacesstat, $call_namespacesstat;
    return array('loaded' => $load_namespacesstat, 'calls' => $call_namespacesstat);
}

<?php
/**
 *  Autoloader function generated by crodas/Autoloader
 *
 *  https://github.com/crodas/Autoloader
 *
 *  This is a generated file, do not modify it.
 */
$GLOBALS['call_complex_annotationsstat'] = 0;
$GLOBALS['load_complex_annotationsstat'] = 0;

spl_autoload_register(function ($class) {
    /*
        This array has a map of (class => file)
    */

    // classes {{{
    static $classes = array (
  'xxxinterface_ann' => '/home/crodas/projects/newest/Autoloader/tests/fixtures/complex_annotations/interface2.php',
  'autoloader\\test\\complex\\xxxfoobar_ann' => '/home/crodas/projects/newest/Autoloader/tests/fixtures/complex_annotations/anotherInterface.php',
  'barinterface_ann' => '/home/crodas/projects/newest/Autoloader/tests/fixtures/complex_annotations/interface1.php',
  'foointerface_ann' => '/home/crodas/projects/newest/Autoloader/tests/fixtures/complex_annotations/interface.php',
  'autoloader\\test\\complex\\complex_ann' => '/home/crodas/projects/newest/Autoloader/tests/fixtures/complex_annotations/Foo.php',
  'simple_ann' => '/home/crodas/projects/newest/Autoloader/tests/fixtures/complex_annotations/Bar.php',
);
    // }}}

    // deps {{{
    static $deps    = array (
  'barinterface_ann' => 
  array (
    0 => 
    array (
      0 => 'xxxinterface_ann',
      1 => 'interface_exists',
    ),
  ),
  'foointerface_ann' => 
  array (
    0 => 
    array (
      0 => 'xxxinterface_ann',
      1 => 'interface_exists',
    ),
    1 => 
    array (
      0 => 'barinterface_ann',
      1 => 'interface_exists',
    ),
  ),
);
    // }}}

    $class = strtolower($class);
    if (isset($classes[$class])) {
        $GLOBALS['call_complex_annotationsstat']++;
        if (!empty($deps[$class])) {
            foreach ($deps[$class] as $zclass) {
                if (is_array($zclass)) {
                    if (!$zclass[1]($zclass[0], false)) {
                        $GLOBALS['load_complex_annotationsstat']++;
                        require $classes[$zclass[0]];
                    }
                } else if (!class_exists($zclass, false)) {
                    $GLOBALS['load_complex_annotationsstat']++;
                    require $classes[$zclass];
                }
            }
        }

        if (is_array($class)) {

            if (!$class[1]($class[0], false)) {

                $GLOBALS['load_complex_annotationsstat']++;

                require $classes[$class[0]];

            }

        } else if (!class_exists($class, false)) {

            $GLOBALS['load_complex_annotationsstat']++;

            require $classes[$class];

        }
        return true;
    }

    /**
     * Autoloader that implements the PSR-0 spec for interoperability between
     * PHP software.
     *
     * kudos to @alganet for this autoloader script.
     * borrowed from https://github.com/Respect/Validation/blob/develop/tests/bootstrap.php
     */
    $fileParts = explode('\\', ltrim($class, '\\'));
    if (false !== strpos(end($fileParts), '_')) {
        array_splice($fileParts, -1, 1, explode('_', current($fileParts)));
    }
    $file = stream_resolve_include_path(implode(DIRECTORY_SEPARATOR, $fileParts) . '.php');
    if ($file) {
        return require $file;
    }
    return false;
}, true, true);


function getcomplex_annotationsstat() {
    global $load_complex_annotationsstat, $call_complex_annotationsstat;
    return array('loaded' => $load_complex_annotationsstat, 'calls' => $call_complex_annotationsstat);
}
